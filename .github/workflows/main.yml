name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  NX_BRANCH: ${{ github.event.number }}
  NX_RUN_GROUP: ${{ github.run_id }}

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Cache node_modules
        uses: actions/cache@v3
        id: node_modules_cache
        with:
          path: |
            node_modules
            **/node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/pnpm-lock.yaml') }}

  lint:
    name: Lint
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false

      - name: Restore node_modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            **/node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Run Lint
        run: npx nx affected --target=lint --parallel=3

  test:
    name: Test
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false

      - name: Restore node_modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            **/node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Run Tests
        run: npx nx affected --target=test --parallel=3 --ci --code-coverage

  build:
    name: Build
    needs: [lint, test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false

      - name: Restore node_modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            **/node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Build
        run: npx nx affected --target=build --parallel=3 --prod

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: dist/

  terraform-plan:
    name: Terraform Plan
    needs: [build]
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.x

      - name: Terraform Init
        run: terraform init
        working-directory: ./dulce-platform/tools/terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./dulce-platform/tools/terraform

      - name: Terraform Plan
        run: terraform plan -input=false
        working-directory: ./dulce-platform/tools/terraform
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
          TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}

  deploy-staging:
    name: Deploy to Staging
    needs: [build]
    if: github.event.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.x

      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: dist/

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GOOGLE_CREDENTIALS }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          export_default_credentials: true

      - name: Terraform Init
        run: terraform init
        working-directory: ./dulce-platform/tools/terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve -var="environment=staging"
        working-directory: ./dulce-platform/tools/terraform
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
          TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy Apps to Cloud Run
        run: |
          # Deploy each app to Cloud Run
          for app in api admin-portal analytics-dashboard pos-integration; do
            gcloud run deploy $app --image=gcr.io/${{ secrets.GCP_PROJECT_ID }}/$app:${{ github.sha }} --region=asia-southeast1 --platform=managed --allow-unauthenticated
          done

  deploy-prod:
    name: Deploy to Production
    needs: [deploy-staging]
    if: github.event.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Manual Approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.token }}
          approvers: ${{ github.actor }}
          minimum-approvals: 1
          issue-title: "Deploy to Production"
          issue-body: "Please approve to deploy to production"
          exclude-workflow-initiator-as-approver: false
          timeout-minutes: 1440 # 24 hours

      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.x

      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: dist/

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GOOGLE_CREDENTIALS }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          export_default_credentials: true

      - name: Terraform Init
        run: terraform init
        working-directory: ./dulce-platform/tools/terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve -var="environment=production"
        working-directory: ./dulce-platform/tools/terraform
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
          TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy Apps to Cloud Run
        run: |
          # Deploy each app to Cloud Run
          for app in api admin-portal analytics-dashboard pos-integration; do
            gcloud run deploy $app --image=gcr.io/${{ secrets.GCP_PROJECT_ID }}/$app:${{ github.sha }} --region=asia-southeast1 --platform=managed --allow-unauthenticated
          done
